# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.4
#
# <auto-generated>
#
# Generated from file `calculator.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if 'NoInput' not in _M_Demo.__dict__:
    _M_Demo.NoInput = Ice.createTempClass()
    class NoInput(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Demo::NoInput'

    _M_Demo._t_NoInput = IcePy.defineException('::Demo::NoInput', NoInput, (), False, None, ())
    NoInput._ice_type = _M_Demo._t_NoInput

    _M_Demo.NoInput = NoInput
    del NoInput

if 'EmptySequence' not in _M_Demo.__dict__:
    _M_Demo.EmptySequence = Ice.createTempClass()
    class EmptySequence(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Demo::EmptySequence'

    _M_Demo._t_EmptySequence = IcePy.defineException('::Demo::EmptySequence', EmptySequence, (), False, None, ())
    EmptySequence._ice_type = _M_Demo._t_EmptySequence

    _M_Demo.EmptySequence = EmptySequence
    del EmptySequence

if '_t_seq' not in _M_Demo.__dict__:
    _M_Demo._t_seq = IcePy.defineSequence('::Demo::seq', (), IcePy._t_int)

if '_t_bucketMap' not in _M_Demo.__dict__:
    _M_Demo._t_bucketMap = IcePy.defineDictionary('::Demo::bucketMap', (), IcePy._t_int, _M_Demo._t_seq)

if 'Transaction' not in _M_Demo.__dict__:
    _M_Demo.Transaction = Ice.createTempClass()
    class Transaction(object):
        def __init__(self, seller='', moneyAmount=0.0, buyer='', timestamp=0):
            self.seller = seller
            self.moneyAmount = moneyAmount
            self.buyer = buyer
            self.timestamp = timestamp

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Demo.Transaction):
                return NotImplemented
            else:
                if self.seller != other.seller:
                    return False
                if self.moneyAmount != other.moneyAmount:
                    return False
                if self.buyer != other.buyer:
                    return False
                if self.timestamp != other.timestamp:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Transaction)

        __repr__ = __str__

    _M_Demo._t_Transaction = IcePy.defineStruct('::Demo::Transaction', Transaction, (), (
        ('seller', (), IcePy._t_string),
        ('moneyAmount', (), IcePy._t_float),
        ('buyer', (), IcePy._t_string),
        ('timestamp', (), IcePy._t_int)
    ))

    _M_Demo.Transaction = Transaction
    del Transaction

_M_Demo._t_Calc = IcePy.defineValue('::Demo::Calc', Ice.Value, -1, (), False, True, None, ())

if 'CalcPrx' not in _M_Demo.__dict__:
    _M_Demo.CalcPrx = Ice.createTempClass()
    class CalcPrx(Ice.ObjectPrx):

        def sortBuckets(self, buckets, context=None):
            return _M_Demo.Calc._op_sortBuckets.invoke(self, ((buckets, ), context))

        def sortBucketsAsync(self, buckets, context=None):
            return _M_Demo.Calc._op_sortBuckets.invokeAsync(self, ((buckets, ), context))

        def begin_sortBuckets(self, buckets, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Calc._op_sortBuckets.begin(self, ((buckets, ), _response, _ex, _sent, context))

        def end_sortBuckets(self, _r):
            return _M_Demo.Calc._op_sortBuckets.end(self, _r)

        def sumOfRoots(self, sq, context=None):
            return _M_Demo.Calc._op_sumOfRoots.invoke(self, ((sq, ), context))

        def sumOfRootsAsync(self, sq, context=None):
            return _M_Demo.Calc._op_sumOfRoots.invokeAsync(self, ((sq, ), context))

        def begin_sumOfRoots(self, sq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Calc._op_sumOfRoots.begin(self, ((sq, ), _response, _ex, _sent, context))

        def end_sumOfRoots(self, _r):
            return _M_Demo.Calc._op_sumOfRoots.end(self, _r)

        def payment(self, tr, context=None):
            return _M_Demo.Calc._op_payment.invoke(self, ((tr, ), context))

        def paymentAsync(self, tr, context=None):
            return _M_Demo.Calc._op_payment.invokeAsync(self, ((tr, ), context))

        def begin_payment(self, tr, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Calc._op_payment.begin(self, ((tr, ), _response, _ex, _sent, context))

        def end_payment(self, _r):
            return _M_Demo.Calc._op_payment.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.CalcPrx.ice_checkedCast(proxy, '::Demo::Calc', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.CalcPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Calc'
    _M_Demo._t_CalcPrx = IcePy.defineProxy('::Demo::Calc', CalcPrx)

    _M_Demo.CalcPrx = CalcPrx
    del CalcPrx

    _M_Demo.Calc = Ice.createTempClass()
    class Calc(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Calc', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Calc'

        @staticmethod
        def ice_staticId():
            return '::Demo::Calc'

        def sortBuckets(self, buckets, current=None):
            raise NotImplementedError("servant method 'sortBuckets' not implemented")

        def sumOfRoots(self, sq, current=None):
            raise NotImplementedError("servant method 'sumOfRoots' not implemented")

        def payment(self, tr, current=None):
            raise NotImplementedError("servant method 'payment' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_CalcDisp)

        __repr__ = __str__

    _M_Demo._t_CalcDisp = IcePy.defineClass('::Demo::Calc', Calc, (), None, ())
    Calc._ice_type = _M_Demo._t_CalcDisp

    Calc._op_sortBuckets = IcePy.Operation('sortBuckets', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_bucketMap, False, 0),), (), ((), _M_Demo._t_seq, False, 0), ())
    Calc._op_sumOfRoots = IcePy.Operation('sumOfRoots', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_seq, False, 0),), (), ((), IcePy._t_double, False, 0), ())
    Calc._op_payment = IcePy.Operation('payment', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_Transaction, False, 0),), (), None, ())

    _M_Demo.Calc = Calc
    del Calc

# End of module Demo
