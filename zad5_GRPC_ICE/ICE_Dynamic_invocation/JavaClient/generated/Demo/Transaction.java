//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `calculator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

public class Transaction implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public String seller;

    public float moneyAmount;

    public String buyer;

    public int timestamp;

    public Transaction()
    {
        this.seller = "";
        this.buyer = "";
    }

    public Transaction(String seller, float moneyAmount, String buyer, int timestamp)
    {
        this.seller = seller;
        this.moneyAmount = moneyAmount;
        this.buyer = buyer;
        this.timestamp = timestamp;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Transaction r = null;
        if(rhs instanceof Transaction)
        {
            r = (Transaction)rhs;
        }

        if(r != null)
        {
            if(this.seller != r.seller)
            {
                if(this.seller == null || r.seller == null || !this.seller.equals(r.seller))
                {
                    return false;
                }
            }
            if(this.moneyAmount != r.moneyAmount)
            {
                return false;
            }
            if(this.buyer != r.buyer)
            {
                if(this.buyer == null || r.buyer == null || !this.buyer.equals(r.buyer))
                {
                    return false;
                }
            }
            if(this.timestamp != r.timestamp)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Demo::Transaction");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, seller);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, moneyAmount);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, buyer);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, timestamp);
        return h_;
    }

    public Transaction clone()
    {
        Transaction c = null;
        try
        {
            c = (Transaction)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.seller);
        ostr.writeFloat(this.moneyAmount);
        ostr.writeString(this.buyer);
        ostr.writeInt(this.timestamp);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.seller = istr.readString();
        this.moneyAmount = istr.readFloat();
        this.buyer = istr.readString();
        this.timestamp = istr.readInt();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Transaction v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Transaction ice_read(com.zeroc.Ice.InputStream istr)
    {
        Transaction v = new Transaction();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Transaction> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Transaction v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Transaction> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Transaction.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Transaction _nullMarshalValue = new Transaction();

    /** @hidden */
    public static final long serialVersionUID = 499887366L;
}
